// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Employee {
  id          String         @id @default(cuid())
  createTime  DateTime       @default(now())
  updateTime  DateTime       @updatedAt
  firstName   String
  lastName    String
  phoneNumber String
  email       String         @unique
  password    String
  image       String?
  type        UserType
  shopId      String
  status      EmployeeStatus @default(ACTIVE)

  workOrders   WorkOrder[]
  appointments Appointment[]
  shop         Shop          @relation(fields: [shopId], references: [id])

  @@index([shopId])
}

model Customer {
  id           String        @id @default(cuid())
  createTime   DateTime      @default(now())
  updateTime   DateTime      @updatedAt
  firstName    String
  lastName     String
  phoneNumber  String
  email        String        @unique
  password     String
  image        String?
  type         UserType      @default(CUSTOMER)
  appointments Appointment[]
  chatMessages ChatMessage[]
  quotes       Quote[]
  vehicles     Vehicle[]
  workOrders   WorkOrder[]
}

model Appointment {
  id                 String            @id @default(cuid())
  createTime         DateTime          @default(now())
  updateTime         DateTime          @updatedAt
  quoteId            String?
  workOrderId        String            @unique
  vehicleId          String
  price              Float
  employeeId         String?
  customerId         String
  status             AppointmentStatus @default(PENDING_APPROVAL)
  startTime          DateTime
  endTime            DateTime
  shopId             String
  serviceId          String
  cancellationReason String?

  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])
  quote     Quote?    @relation(fields: [quoteId], references: [id])
  workOrder WorkOrder @relation(fields: [workOrderId], references: [id])
  employee  Employee? @relation(fields: [employeeId], references: [id])
  customer  Customer  @relation(fields: [customerId], references: [id])
  shop      Shop      @relation(fields: [shopId], references: [id])
  service   Service   @relation(fields: [serviceId], references: [id])

  @@index([shopId])
  @@index([serviceId])
  @@index([vehicleId])
  @@index([customerId])
  @@index([employeeId])
  @@index([quoteId])
}

model Quote {
  id             String      @id @default(cuid())
  createTime     DateTime    @default(now())
  updateTime     DateTime    @updatedAt
  customerId     String
  shopId         String
  serviceId      String
  status         QuoteStatus @default(IN_PROGRESS)
  estimatedPrice Float?
  duration       Float?
  description    String?

  customer     Customer      @relation(fields: [customerId], references: [id])
  shop         Shop          @relation(fields: [shopId], references: [id])
  service      Service?      @relation(fields: [serviceId], references: [id])
  appointments Appointment[]
  chatMessages ChatMessage[]

  @@index([customerId])
  @@index([shopId])
  @@index([serviceId])
}

model ChatMessage {
  id         String   @id @default(cuid())
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  message    String
  quoteId    String
  customerId String?
  shopId     String?

  customer Customer? @relation(fields: [customerId], references: [id])
  shop     Shop?     @relation(fields: [shopId], references: [id])
  quote    Quote     @relation(fields: [quoteId], references: [id])

  @@index([customerId])
  @@index([shopId])
  @@index([quoteId])
}

model Vehicle {
  id           String        @id @default(cuid())
  createTime   DateTime      @default(now())
  updateTime   DateTime      @updatedAt
  year         Int
  make         String
  model        String
  vin          String
  licensePlate String
  customerId   String
  appointments Appointment[]
  workOrders   WorkOrder[]

  customer Customer @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model WorkOrder {
  id          String       @id @default(cuid())
  createTime  DateTime     @default(now())
  updateTime  DateTime     @updatedAt
  appointment Appointment?
  title       String
  customerId  String
  vehicleId   String
  employeeId  String?
  body        String
  shopId      String

  customer Customer  @relation(fields: [customerId], references: [id])
  vehicle  Vehicle   @relation(fields: [vehicleId], references: [id])
  employee Employee? @relation(fields: [employeeId], references: [id])
  shop     Shop      @relation(fields: [shopId], references: [id])

  @@index([customerId])
  @@index([vehicleId])
  @@index([employeeId])
  @@index([shopId])
}

model Shop {
  id               String   @id @default(cuid())
  createTime       DateTime @default(now())
  updateTime       DateTime @updatedAt
  name             String
  address          String
  phoneNumber      String
  email            String
  postalCode       String
  city             String
  province         String
  hoursOfOperation Json?

  appointments Appointment[]
  employees    Employee[]
  chatMessages ChatMessage[]
  quotes       Quote[]
  workOrders   WorkOrder[]
  services     Service[]
}

model Service {
  id            String        @id @default(cuid())
  createTime    DateTime      @default(now())
  updateTime    DateTime      @updatedAt
  name          String
  description   String
  estimatedTime Float
  totalPrice    Float
  parts         Json
  type          ServiceType
  appointments  Appointment[]
  quotes        Quote[]
  shopId        String

  shop Shop @relation(fields: [shopId], references: [id])

  @@index([shopId])
}

enum UserType {
  SHOP_OWNER
  EMPLOYEE
  CUSTOMER
}

enum ServiceType {
  CANNED
  CUSTOM
  REWORK
}

enum AppointmentStatus {
  PENDING_APPROVAL
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EmployeeStatus {
  ACTIVE
  SUSPENDED
}

enum QuoteStatus {
  IN_PROGRESS
  INVITED
  ACCEPTED
}
