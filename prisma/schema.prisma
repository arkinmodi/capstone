// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Employee {
  id           String         @id @default(cuid())
  create_time  DateTime       @default(now())
  update_time  DateTime       @updatedAt
  first_name   String
  last_name    String
  phone_number String
  email        String         @unique
  password     String
  image        String?
  type         UserType
  shop_id      String
  status       EmployeeStatus @default(ACTIVE)

  work_orders  WorkOrder[]
  appointments Appointment[]
  shop         Shop          @relation(fields: [shop_id], references: [id])

  @@index([shop_id])
}

model Customer {
  id            String        @id @default(cuid())
  create_time   DateTime      @default(now())
  update_time   DateTime      @updatedAt
  first_name    String
  last_name     String
  phone_number  String
  email         String        @unique
  password      String
  image         String?
  type          UserType      @default(CUSTOMER)
  appointments  Appointment[]
  chat_messages ChatMessage[]
  quotes        Quote[]
  vehicles      Vehicle[]
  work_orders   WorkOrder[]
}

// TODO: re-evaluate what should be optional for Appointment
model Appointment {
  id            String            @id @default(cuid())
  create_time   DateTime          @default(now())
  update_time   DateTime          @updatedAt
  quote_id      String?           @unique
  work_order_id String            @unique
  vehicle_id    String?
  service_type  ServiceType
  price         Float?
  employee_id   String?
  customer_id   String?
  status        AppointmentStatus
  start_time    DateTime
  end_time      DateTime
  shop_id       String?

  vehicle    Vehicle?  @relation(fields: [vehicle_id], references: [id])
  quote      Quote?    @relation(fields: [quote_id], references: [id])
  work_order WorkOrder @relation(fields: [work_order_id], references: [id])
  employee   Employee? @relation(fields: [employee_id], references: [id])
  customer   Customer? @relation(fields: [customer_id], references: [id])
  shop       Shop?     @relation(fields: [shop_id], references: [id])

  @@index([shop_id])
  @@index([vehicle_id])
  @@index([customer_id])
  @@index([employee_id])
}

model Quote {
  id          String   @id @default(cuid())
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  customer_id String
  shop_id     String

  customer      Customer      @relation(fields: [customer_id], references: [id])
  shop          Shop          @relation(fields: [shop_id], references: [id])
  appointment   Appointment?
  chat_messages ChatMessage[]

  @@index([customer_id])
  @@index([shop_id])
}

model ChatMessage {
  id          String   @id @default(cuid())
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  message     String
  quote_id    String
  customer_id String?
  shop_id     String?

  customer Customer? @relation(fields: [customer_id], references: [id])
  shop     Shop?     @relation(fields: [shop_id], references: [id])
  quote    Quote     @relation(fields: [quote_id], references: [id])

  @@index([customer_id])
  @@index([shop_id])
  @@index([quote_id])
}

model Vehicle {
  id            String        @id @default(cuid())
  create_time   DateTime      @default(now())
  update_time   DateTime      @updatedAt
  year          Int
  make          String
  model         String
  vin           String
  license_plate String
  customer_id   String
  appointments  Appointment[]
  work_orders   WorkOrder[]

  customer Customer @relation(fields: [customer_id], references: [id])

  @@index([customer_id])
}

model WorkOrder {
  id          String       @id @default(cuid())
  create_time DateTime     @default(now())
  update_time DateTime     @updatedAt
  appointment Appointment?
  title       String
  customer_id String
  vehicle_id  String
  employee_id String?
  body        String
  shop_id     String

  customer Customer  @relation(fields: [customer_id], references: [id])
  vehicle  Vehicle   @relation(fields: [vehicle_id], references: [id])
  employee Employee? @relation(fields: [employee_id], references: [id])
  shop     Shop      @relation(fields: [shop_id], references: [id])

  @@index([customer_id])
  @@index([vehicle_id])
  @@index([employee_id])
  @@index([shop_id])
}

model Shop {
  id            String        @id @default(cuid())
  create_time   DateTime      @default(now())
  update_time   DateTime      @updatedAt
  appointments  Appointment[]
  employees     Employee[]
  chat_messages ChatMessage[]
  quotes        Quote[]
  // services     Service[]
  work_orders   WorkOrder[]
}

model Service {
  id             String   @id @default(cuid())
  create_time    DateTime @default(now())
  update_time    DateTime @updatedAt
  name           String
  description    String
  estimated_time Int
  total_price    Float
  parts          Json
  // shop_id        String?

  // shop Shop? @relation(fields: [shop_id], references: [id])

  // @@index([shop_id])
}

enum UserType {
  SHOP_OWNER
  EMPLOYEE
  CUSTOMER
}

enum ServiceType {
  CANNED
  CUSTOM
  REWORK
}

enum AppointmentStatus {
  PENDING_APPROVAL
  ACCEPTED
  REJECTED
}

enum EmployeeStatus {
  ACTIVE
  SUSPENDED
}
