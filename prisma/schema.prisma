// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// TODO: break user into Employee and Customer tables
model User {
  id          String   @id @default(cuid())
  create_time DateTime @default(now())
  update_time DateTime @updatedAt
  first_name  String
  last_name   String
  email       String   @unique
  password    String
  image       String?
  type        UserType
  shop_id     String?

  employee_appointments Appointment[] @relation(name: "employee")
  customer_appointments Appointment[] @relation(name: "customer")
  shop                  Shop?         @relation(fields: [shop_id], references: [id])
}

model Appointment {
  id            String            @id @default(cuid())
  create_time   DateTime          @default(now())
  update_time   DateTime          @updatedAt
  quote_id      String?           @unique
  work_order_id String            @unique
  vehicle_id    String            @unique
  service_type  ServiceType
  price         Float?
  employee_id   String?           @unique
  customer_id   String            @unique
  status        AppointmentStatus
  start_time    DateTime
  end_time      DateTime
  shop_id       String?

  vehicle    Vehicle   @relation(fields: [vehicle_id], references: [id])
  quote      Quote?    @relation(fields: [quote_id], references: [id])
  work_order WorkOrder @relation(fields: [work_order_id], references: [id])
  employee   User?     @relation(fields: [employee_id], references: [id], name: "employee")
  customer   User      @relation(fields: [customer_id], references: [id], name: "customer")
  shop       Shop?     @relation(fields: [shop_id], references: [id])
}

model Quote {
  id          String       @id @default(cuid())
  create_time DateTime     @default(now())
  update_time DateTime     @updatedAt
  appointment Appointment?
}

model Vehicle {
  id            String        @id @default(cuid())
  create_time   DateTime      @default(now())
  update_time   DateTime      @updatedAt
  year          Int
  make          String
  model         String
  vin           String
  license_plate String
  appointment   Appointment[]
}

model WorkOrder {
  id          String       @id @default(cuid())
  create_time DateTime     @default(now())
  update_time DateTime     @updatedAt
  appointment Appointment?
}

model Shop {
  id           String        @id @default(cuid())
  create_time  DateTime      @default(now())
  update_time  DateTime      @updatedAt
  appointments Appointment[]
  employees    User[]
}

enum UserType {
  SHOP_OWNER
  EMPLOYEE
  CUSTOMER
}

enum ServiceType {
  CANNED
  CUSTOM
  REWORK
}

enum AppointmentStatus {
  PENDING_APPROVAL
  ACCEPTED
  REJECTED
}
